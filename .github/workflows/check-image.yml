name: Check for New Docker Image Version

on:
  schedule:
    - cron: '*/5 * * * *'  # Check every 5 minutes
  workflow_dispatch:

jobs:
  check-version:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Install prerequisites
      run: |
        sudo apt-get -y install jq
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.3/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

    - name: Get current version
      id: current-version
      run: |
        CURRENT_VERSION=$(docker inspect tcnichol/test --format '{{.Config.Image}}' | cut -d':' -f2)
        echo "CURRENT_VERSION=${CURRENT_VERSION}" >> $GITHUB_ENV
        echo "Current version: $CURRENT_VERSION"

    - name: Fetch all tags from Docker Hub
      id: fetch-tags
      run: |
        TAGS=$(curl -s "https://hub.docker.com/v2/repositories/tcnichol/test/tags/?page_size=100" | jq -r '.results[].name' | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$')
        LATEST_VERSION=$(echo "$TAGS" | sort -V | tail -1)
        echo "LATEST_VERSION=${LATEST_VERSION}" >> $GITHUB_ENV
        echo "Latest available version: $LATEST_VERSION"

    - name: Compare versions
      id: compare
      run: |
        if [ "$(printf '%s\n' "${{ env.CURRENT_VERSION }}" "${{ env.LATEST_VERSION }}" | sort -V | head -n1)" != "${{ env.LATEST_VERSION }}" ]; then
          echo "UPDATE_AVAILABLE=true" >> $GITHUB_ENV
          echo "New version available: ${{ env.LATEST_VERSION }} (current: ${{ env.CURRENT_VERSION }})"
        else
          echo "UPDATE_AVAILABLE=false" >> $GITHUB_ENV
          echo "Already on latest version: ${{ env.CURRENT_VERSION }}"
        fi

    - name: Update to new version
      if: env.UPDATE_AVAILABLE == 'true'
      run: |
        # Update compose file with new version
        sed -i "s|image: tcnichol/test:.*|image: tcnichol/test:${{ env.LATEST_VERSION }}|" docker-compose.yml
        
        # Pull new image and restart
        docker-compose pull
        docker-compose up -d --force-recreate
        
        # Cleanup
        docker image prune -f
        echo "Updated to version ${{ env.LATEST_VERSION }}"